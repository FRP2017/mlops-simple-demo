name: MLOps Iris Demo CI/CD

on:
  push:
    branches: [ "main" ] # Ajusta a tu rama principal
  # pull_request: # Descomenta si quieres que corra en PRs también
  #   branches: [ "main", "master" ]

env:
  GCP_PROJECT_ID: "mlops-second"
  GCP_REGION: "us-central1"
  GCP_AR_REPO_NAME: "ml-models-repo"
  DOCKER_IMAGE_NAME: "iris-classifier-app"
  GCS_BUCKET_NAME_NO_GS: "mlops-second-iris-bucket"

jobs:
  setup-build-push-docker:
    name: Setup, Build, and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Necesario para Workload Identity Federation

    outputs:
      # docker_image_uri: ${{ steps.push_docker_image.outputs.image_uri_sha }} # Cambiado para usar image_uri_sha
      docker_image_uri_latest: ${{ steps.push_docker_image.outputs.image_uri_latest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
        service_account: ${{ secrets.GCP_SA_EMAIL }} # SA que usa GitHub Actions para autenticarse

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    - name: Build Docker image
      id: build_docker_image
      run: |
        IMAGE_URI_SHA="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
        IMAGE_URI_LATEST="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        docker build -t "$IMAGE_URI_SHA" -t "$IMAGE_URI_LATEST" .
        echo "image_uri_sha=$IMAGE_URI_SHA" >> $GITHUB_OUTPUT
        echo "image_uri_latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT

    - name: Push Docker image to Artifact Registry
      id: push_docker_image
      run: |
        docker push "${{ steps.build_docker_image.outputs.image_uri_sha }}"
        docker push "${{ steps.build_docker_image.outputs.image_uri_latest }}"
        echo "Pushed images: ${{ steps.build_docker_image.outputs.image_uri_sha }} and ${{ steps.build_docker_image.outputs.image_uri_latest }}"
        # El output 'docker_image_uri_latest' es el que usaremos en el siguiente job
        # echo "image_uri_sha=${{ steps.build_docker_image.outputs.image_uri_sha }}" >> $GITHUB_OUTPUT # Ya se define arriba
        # echo "image_uri_latest=${{ steps.build_docker_image.outputs.image_uri_latest }}" >> $GITHUB_OUTPUT # Ya se define arriba

  compile-and-submit-pipeline-via-sdk: # Nombre del job actualizado
    name: Compile and Submit Vertex AI Pipeline via Python SDK # Nombre del job actualizado
    runs-on: ubuntu-latest
    needs: setup-build-push-docker

    permissions:
      contents: 'read'
      id-token: 'write' # Necesario para Workload Identity Federation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      # No es estrictamente necesario si el SDK de Python usa las credenciales de 'auth',
      # pero no causa problemas y puede ser útil para otros comandos gcloud si los añades.

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
        service_account: ${{ secrets.GCP_SA_EMAIL }} # SA que usa GitHub Actions para autenticarse y tiene permisos para *enviar* jobs a Vertex AI.

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # O la versión que estés usando

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # Asegúrate que kfp y google-cloud-aiplatform estén aquí

    - name: Compile and Submit Pipeline via Python Script
      run: |
        echo "Starting Python script to compile and submit pipeline..."
        # Exporta las variables de entorno que el script training_pipeline.py espera
        export PIPELINE_DOCKER_IMAGE="${{ needs.setup-build-push-docker.outputs.docker_image_uri_latest }}"
        export GCP_PROJECT_ID="${{ env.GCP_PROJECT_ID }}"
        export GCP_REGION="${{ env.GCP_REGION }}"
        export GCS_BUCKET_NAME_NO_GS="${{ env.GCS_BUCKET_NAME_NO_GS }}"
        
        # Esta es la cuenta de servicio que los *componentes del pipeline* usarán en Vertex AI.
        # Puede ser la misma que secrets.GCP_SA_EMAIL si esa tiene todos los permisos necesarios,
        # o una diferente más específica para las operaciones del pipeline.
        # Asegúrate de que este secreto exista en GitHub si es diferente.
        export GCP_SA_EMAIL_FOR_PIPELINE="${{ secrets.GCP_SA_EMAIL_FOR_PIPELINE }}" # O usa ${{ secrets.GCP_SA_EMAIL }} si es la misma

        # GITHUB_RUN_ID y GITHUB_SHA son variables de entorno que GitHub Actions provee automáticamente
        # y tu script de Python las leerá con os.getenv("GITHUB_RUN_ID") y os.getenv("GITHUB_SHA").

        python pipelines/training_pipeline.py # Este script ahora compila Y envía el pipeline.
      # Ya no se necesita el paso de "gcloud vertex ai pipelines run"