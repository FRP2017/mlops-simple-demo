name: MLOps Iris Demo CI/CD

on:
  push:
    branches: [ "main"] # Ajusta a tu rama principal
  # pull_request: # Descomenta si quieres que corra en PRs también
  #   branches: [ "main", "master" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Configura este secreto en GitHub
  GCP_REGION: "us-central1" # O la región que configuraste
  GCP_AR_REPO_NAME: "ml-models-repo" # El nombre de tu repo en Artifact Registry
  DOCKER_IMAGE_NAME: "iris-classifier-app" # El nombre de tu imagen Docker
  GCS_BUCKET_NAME_NO_GS: "capacitacion-mlops-mlops-bucket" # Nombre de tu bucket (sin gs://)
  # WIF_PROVIDER y SERVICE_ACCOUNT se configuran abajo usando los secretos de GitHub
  # y las variables de entorno de GCP (PROJECT_NUMBER)

jobs:
  setup-build-push-docker:
    name: Setup, Build, and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Necesario para Workload Identity Federation

    outputs:
      docker_image_uri: ${{ steps.push_docker_image.outputs.image_uri }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get GCP Project Number
      id: project_number
      uses: google-github-actions/get-gcp-project-number@v1 # Necesita el ID del proyecto
      with:
        project_id: "capacitacion-mlops"

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: "projects/${{ steps.project_number.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider" # Asegúrate que 'github-pool' y 'github-provider' coincidan con tu config WIF
        service_account: ${{ secrets.GCP_SA_EMAIL }} # Configura este secreto en GitHub (ej. mlops-iris-runner@tu-proyecto.iam.gserviceaccount.com)

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    - name: Build Docker image
      id: build_docker_image
      run: |
        IMAGE_URI="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
        docker build -t "$IMAGE_URI" .
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      # El $GITHUB_OUTPUT permite pasar la URI de la imagen al siguiente paso y al output del job

    - name: Push Docker image to Artifact Registry
      id: push_docker_image
      run: |
        docker push "${{ steps.build_docker_image.outputs.image_uri }}"
        echo "Pushed image: ${{ steps.build_docker_image.outputs.image_uri }}"
        echo "image_uri=${{ steps.build_docker_image.outputs.image_uri }}" >> $GITHUB_OUTPUT


  compile-and-run-pipeline:
    name: Compile and Run Vertex AI Pipeline
    runs-on: ubuntu-latest
    needs: setup-build-push-docker # Depende del job anterior
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get GCP Project Number
      id: project_number
      uses: google-github-actions/get-gcp-project-number@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: "projects/${{ steps.project_number.outputs.project_number }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
        service_account: ${{ secrets.GCP_SA_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Coincide con tu entorno de desarrollo y Dockerfile

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Compile pipeline
      id: compile_pipeline
      run: |
        # Pasar la URI de la imagen Docker del job anterior al script de Python
        # para que se use en la definición del componente
        export PIPELINE_DOCKER_IMAGE="${{ needs.setup-build-push-docker.outputs.docker_image_uri }}"
        export PROJECT_ID="${{ env.GCP_PROJECT_ID }}"
        export REGION="${{ env.GCP_REGION }}"
        export BUCKET_NAME="${{ env.GCS_BUCKET_NAME_NO_GS }}"

        python pipelines/training_pipeline.py
        echo "COMPILED_PIPELINE_PATH=compiled_iris_pipeline.json" >> $GITHUB_ENV
        # Opcional: Subir el JSON compilado a GCS si el script de Python no lo hace
        # gsutil cp compiled_iris_pipeline.json gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/pipelines/compiled/compiled_iris_pipeline_${{ github.sha }}.json
        # echo "GCS_COMPILED_PATH=gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/pipelines/compiled/compiled_iris_pipeline_${{ github.sha }}.json" >> $GITHUB_ENV
      env:
        PIPELINE_DOCKER_IMAGE: ${{ needs.setup-build-push-docker.outputs.docker_image_uri }} # Hacerla disponible para el script Python

    - name: Submit Vertex AI Pipeline Job
      run: |
        gcloud ai pipeline-jobs submit \
          --project="${{ env.GCP_PROJECT_ID }}" \
          --region="${{ env.GCP_REGION }}" \
          --pipeline-file="${{ env.COMPILED_PIPELINE_PATH }}" \
          --display-name="iris-pipeline-run-${{ github.sha }}" \
          --pipeline-root="gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/pipelines/runs" \
          --parameter-values="raw_data_gcs_uri=gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/data/iris_raw.csv" \
          --service-account="${{ secrets.GCP_SA_EMAIL }}" # Opcional, si el pipeline necesita permisos específicos que la SA por defecto de Vertex no tiene.
                                                          # La SA que ejecuta el pipeline job debe tener permisos para actuar como otras SAs si los componentes lo requieren.
                                                          # Es más simple si los componentes mismos usan la SA del WIF heredada o la SA por defecto de Vertex AI.
                                                          # Si tu SA de WIF tiene todos los roles necesarios, Vertex AI la usará si la especificas aquí.