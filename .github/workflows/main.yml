name: MLOps Iris Demo CI/CD

on:
  push:
    branches: [ "main"] # Ajusta a tu rama principal
  # pull_request: # Descomenta si quieres que corra en PRs también
  #   branches: [ "main", "master" ]

env:
  # Usamos el ID del proyecto directamente aquí.
  # Si usas un secreto, asegúrate de que esté configurado en GitHub.
  GCP_PROJECT_ID: "mlops-second" # Tu ID de proyecto de GCP
  GCP_REGION: "us-central1" # O la región que configuraste
  GCP_AR_REPO_NAME: "ml-models-repo" # El nombre de tu repo en Artifact Registry
  DOCKER_IMAGE_NAME: "iris-classifier-app" # El nombre de tu imagen Docker
  # Ajusta el nombre del bucket directamente
  GCS_BUCKET_NAME_NO_GS: "mlops-second-iris-bucket" # Nombre de tu bucket (sin gs://)

jobs:
  setup-build-push-docker:
    name: Setup, Build, and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Necesario para Workload Identity Federation

    outputs:
      docker_image_uri: ${{ steps.push_docker_image.outputs.image_uri }}
      docker_image_uri_latest: ${{ steps.push_docker_image.outputs.image_uri_latest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ¡IMPORTANTE! El orden de estos pasos es crucial para la autenticación.
    # 'Set up Cloud SDK' debe ir antes de 'Authenticate to Google Cloud'.
    # La autenticación ahora usa el secreto GCP_PROJECT_NUMBER.
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        # Aquí usamos el SECRETO que contiene el NÚMERO DE PROYECTO.
        # Asegúrate de haberlo configurado en GitHub Secrets con el VALOR NUMÉRICO.
        workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
        service_account: ${{ secrets.GCP_SA_EMAIL }}

    # El paso 'Get GCP Project Number (Alternative)' ha sido eliminado de aquí,
    # ya que el número de proyecto se obtiene directamente del secreto para la autenticación.
    # Los comandos posteriores pueden usar ${{ secrets.GCP_PROJECT_NUMBER }} si necesitan el número.

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    - name: Build Docker image
      id: build_docker_image
      run: |
        IMAGE_URI_SHA="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
        IMAGE_URI_LATEST="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AR_REPO_NAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        docker build -t "$IMAGE_URI_SHA" -t "$IMAGE_URI_LATEST" .
        echo "image_uri_sha=$IMAGE_URI_SHA" >> $GITHUB_OUTPUT
        echo "image_uri_latest=$IMAGE_URI_LATEST" >> $GITHUB_OUTPUT

    - name: Push Docker image to Artifact Registry
      id: push_docker_image
      run: |
        docker push "${{ steps.build_docker_image.outputs.image_uri_sha }}"
        docker push "${{ steps.build_docker_image.outputs.image_uri_latest }}"
        echo "Pushed images: ${{ steps.build_docker_image.outputs.image_uri_sha }} and ${{ steps.build_docker_image.outputs.image_uri_latest }}"
        echo "image_uri=${{ steps.build_docker_image.outputs.image_uri_sha }}" >> $GITHUB_OUTPUT # Para compatibilidad con el siguiente job si usa una específica
        echo "image_uri_latest=${{ steps.build_docker_image.outputs.image_uri_latest }}" >> $GITHUB_OUTPUT


  compile-and-run-pipeline:
    name: Compile and Run Vertex AI Pipeline
    runs-on: ubuntu-latest
    needs: setup-build-push-docker # Depende del job anterior

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Mismo orden de autenticación para el segundo job
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        # Aquí usamos el SECRETO que contiene el NÚMERO DE PROYECTO.
        workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
        service_account: ${{ secrets.GCP_SA_EMAIL }}

    # El paso 'Get GCP Project Number' original ha sido eliminado de aquí también.

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Compile pipeline
      id: compile_pipeline
      run: |
        # Usar la imagen con tag 'latest' para el pipeline, asumiendo que es la más actualizada
        export PIPELINE_DOCKER_IMAGE="${{ needs.setup-build-push-docker.outputs.docker_image_uri_latest }}"
        export PROJECT_ID="${{ env.GCP_PROJECT_ID }}"
        export REGION="${{ env.GCP_REGION }}"
        export BUCKET_NAME="${{ env.GCS_BUCKET_NAME_NO_GS }}"

        python pipelines/training_pipeline.py
        echo "COMPILED_PIPELINE_PATH=compiled_iris_pipeline.json" >> $GITHUB_ENV
        # Opcional: Subir el JSON compilado a GCS para referencia
        # gsutil cp compiled_iris_pipeline.json gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/pipelines/compiled/compiled_iris_pipeline_${{ github.sha }}.json

    - name: Submit Vertex AI Pipeline Job
      run: |
        # CAMBIA esta línea:
        # gcloud ai pipeline-jobs submit \
        # A esta línea:
        gcloud ai pipelines jobs submit \
          --project="${{ env.GCP_PROJECT_ID }}" \
          --region="${{ env.GCP_REGION }}" \
          --pipeline-file="${{ env.COMPILED_PIPELINE_PATH }}" \
          --display-name="iris-pipeline-run-gh-${{ github.run_id }}-${{ github.sha }}" \
          --pipeline-root="gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/pipelines/runs" \
          --service-account="${{ secrets.GCP_SA_EMAIL }}" \
          --parameter-values="raw_data_gcs_uri=gs://${{ env.GCS_BUCKET_NAME_NO_GS }}/data/iris_raw.csv"
        # ... resto del comando